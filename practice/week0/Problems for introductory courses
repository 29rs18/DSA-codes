Problems for introductory courses
Note: For recursion problems solve with and without recursion
Q1. (30)

Consider an n-digit positive integerr k. Square it and add the right n digits
to the left n or n-1 digits. If the resultant sum of either is k, then k is
called a Kaprekar number.

For example, 9 is a Kaprekar number since 9^2=81 and 8+1=9. 297 is a Kaprekar
number since 297^2=88209 and 88+209=297. Notice that 882+209 is not equal to
297 but since 88+209 is, 297 is a Kaprekar number. 31 is not a Kaprekar number
as 31^2=961 and neither 61+9 or 61+96 is equal to 31.

Write a function that tests whether a positive integer is a Kaprekar number.

Write a program that prints all Kaprekar numbers in the range 1 to 999.

Q2. (70)

There is a 20x2 sized board. There are a n pieces of 2x1 sized blocks
available.  We need to fill the board with these blocks. Write a program to
calculate the number of ways in which the board can be filled with these
blocks.

(You may use recursion to solve it. You can do it in your way as well.)





Q1. (50)

Suppose two players are playing a simple game of dice. Each player rolls the die
twice. The winner is decided based on the following rules:
	* If one player has got the same number twice and the other player has not
	  got the same number twice, then the first player wins
	* If both players have got the same number twice, the player with the larger
	  of the numbers wins
	* If none of the players have got the same number twice, the player with the
	  larger sum of numbers wins
	* Otherwise, it is a tie

Simulate the above game. Ensure that the two players do not get the same two
numbers in sequence. They may get the same two numbers out of sequence, i.e.,
(2,3) and (2,3) are not allowed, although (2,3) and (3,2) are allowed. This
automatically means that (2,2) and (2,2) are not allowed.

Print the numbers rolled by both the players. Declare the winner. In case of a
tie, declare a tie.

Use the function rand() that returns a random integer. You can use this
function to generate a random integer within a particular range. For example,
to generate a random integer between 1 and 10, you need to use (1 + rand() %
10).


Q2. (50)

Input an array of integers of size 9. Assume that all the elements of the array
are distinct. Find the median. The median of a set of integers is the number
that is right in the middle, i.e., the number of numbers lesser than it and the
number of numbers greater than it are the same. For an array of size 9, it is
the 5th element when the array is sorted.

You cannot sort the array to find the median.


Q2. (50)

Write a recursive function that checks whether the contents of an integer array
form a palindrome. Assume that the size of the array is at most 10. However,
only positive integers are input. If a zero is read, input stops. Ignore
negative integer inputs.

An array is called a palindrome if the contents of it are the same whether it
is read forward or backward.

For example, the arrays
34 5 6 5 34
and
34 5 5 34
are palindromes, while the array
34 5 6 34
is not.


Q1. (60)

Input three strings s, t and w from the user. Assume that the strings do not
contain blank or any whitespace character.

Write a function that finds all occurrence of substring t in s, and replaces
them by w. The function returns the number of such occurences or replacements.
Assume that t and w are of the same size.

For example,
if the string s is "abcdefghidefjkl",
t is "def"
and w is "xyz",
then after replacement,
s becomes "abcxyzghixyzjkl"
and the function returns 2.

The parameters of the function replace_substring contains only pointers to
characters (not arrays):
	int replace_substring(char *s, char *t, char *w)
Q2. WAP to sort a n*n matrix and print the number of occurences of a number entered by the user.(All algorithms)



Take a string as input from the user. The string will contain only numbers
('0'-'9') and parentheses ( '(', ')' ). Your task is to find a section in the
string that matches the pattern "k(q)", where k is a single digit, q is a
substring of zero or more characters and the 2 parentheses form a matching set.
Once such a pattern is found, replace it by 'k' occurrences of 'q'. Keep doing
this till you can no longer find such patterns. Output the final string
obtained. Note that the parentheses may also be nested in the string s (see 2nd
example).

For example,
if the user inputs
12345(6)
then this will become
123466666

If the user inputs
1(2)3(4(5))
then first this should become
23(4(5))
then
23(5555)
and final output will be
2555555555555



Week 10: Thursday
-----------------

Q1. (40)

Input three strings s, t and w from the user. Assume that the strings do not
contain blank or any whitespace character.

Write a function that finds all occurrences of substring t in s, and replaces
them by w. The function returns the number of such occurences or replacements.
Note that t and w can be of different sizes.

For example,
if the string s is "abcdefghidefjkl",
t is "def"
and w is "xy",
then after replacement,
s becomes "abcxyghixyjkl"
and the function returns 2.

The parameters of the function replace_substring contains only pointers to
characters (not arrays):
	int replace_substring(char *s, char *t, char *w)

Q2. (60)

Given a 2-dimensional matrix of 0's and 1's, a 0-region is defined as a maximal
set of connected cells containing 0's. A cell is connected to its neighbours at
left, right, bottom and top. So, if a cell is (i,j), it is connected to (i-1,j),
(i+1,j), (i,j-1) and (i,j+1). Make sure you handle the boundary cases correctly.

Input a 2-dimensional matrix of size 5x5 from the user and print the number of
0-regions in the matrix. Also for each region, print the coordinates of any one
cell inside it. Assume that the user inputs only 0's and 1's. Also assume that
the top-left cell is (0,0).

For example,
if the input matrix is

1 0 1 1 0
0 0 1 0 1
0 1 0 0 1
1 1 0 0 0
0 0 1 0 1

it has 4 0-regions at cells
(0,1), (0,4), (1,3) and (4,0).


Week 10: Wednesday
------------------

Q1. (50)

Input an integer array a of size 15 from the user. The array can have multiple
occurrences of elements. You have to remove the multiple occurences of elements
and store the distinct elements in a new array. The memory for the new array
has to be dynamically allocated using malloc such that its size is same as the
number of distinct elements in A.

For example,
if array a is 3 4 5 1 4 5 2 4 6 4 2 5 6 3 5
then the new array is
3 4 5 1 2 6
of size 6.   

Q2. (50)

Input an array s that stores 5 strings of maximum size 10. Input another string
t from the user of maximum size 5. Assume that the strings do not contain any
blank or whitespace character.

Write a function that finds the index of first occurrence of substring t in
each string of s. If the substring is not found, it returns -1. Write another
function that returns an integer array of size 5 that stores the index of first
occurence. Return the integer array as a pointer.

For example,
if the array s is "abcdefdef" "agfgdefjhg" "defdd" "wdwdwdwd" "efefd"
and t is "def",
then after calculating the index of t in each string of s the function returns
the pointer to the array
3 4 0 -1 -1

Q2. (60)

Write a function select having the following signature:
	int select(int A[], int l, int r, int i)
The function returns the ith smallest number from an array A, but only
considering the elements from A[l] to A[r].

For example,
if A is  5 9 3 4 8 6 1,
then a call to
select(A, 2, 5, 3)
looks at the subarray 3 4 8 6 and
returns 6.

Note that for finding the median of an array A of size n, we can use
select(A, 0, n-1, (n + 1) / 2).

In the main() function, input an array A of size 25. Divide A into 5 clusters
of size 5 each. Find the median of each cluster by a call to select. Now find
the median of these medians.

Separately, find the median of the whole array. Compare the two medians.

The median of a set of numbers is the middle value of the given numbers when
they are arranged in ascending order.




Week 10: Friday (Saturday)
--------------------------

Q1. (50)

Input an integer array a of size 15 from the user. The array can have multiple
occurrences of elements. You have to remove the multiple occurences of elements
and store the distinct elements in a new array along with their count. The
memory for the new array has to be dynamically allocated using malloc such that
its size is twice the number of distinct elements in A.

For example,
if array a is 3 4 5 1 4 5 2 4 6 4 2 5 6 3 5
then the output is
3 2 4 4 5 4 1 1 2 2 6 2
of size 6 * 2.

Q2. (50)

Input a positive integer n from the user and then input n vectors of size 3.
The memory for storing these n vectors of size 3 must be allocated dynamically
and together.

Now, compute the pairwise distance among these n vectors and store them in a
nxn matrix. The memory for this matrix should also be stored dynamically.

The distance between two vectors is the Euclidean distance, i.e., if the two
vectors are x1, x2, x3 and y1, y2, y3, then the distance between them is
	sqrt((x1 - y1)^2 + (x2 - y2)^2 + (x3 - y3)^2).

Use the sqrt function and math.h. Use gcc -lm to compile.



Q2. (65)

For a character array consisting of 0, 1 and 'x', find 101 numbers in the array.

A number is a 101 number if there exists some i and j such that the ith
character is 1, the (i+j)th character is 0 and the (i+2j)th character is 1.
Any 'x' in the number can be treated as either 0 or 1 (whichever helps in
forming a 101 number).

Output all 101 numbers in the array and their indexes in the array.  If there
is a 'x', output its interpretation as well.

For example,
if the input is 10x11,
the outputs are
101 (x as 1): indexes: 0, 1, 2
and
1x1 (x as 0): indexes: 0, 2, 4

Q1. (35)

Input two strings s and t from the user.  Assume that the strings do not
contain blank or any whitespace character.

Write a function that concatenates t to s, i.e., it modifies s by appending t to it.

The parameters of the function concat contains only pointers to characters (not
arrays):
	void concat(char *s, char *t)

Avoid using notations of the form *(s + i) that simulates s[i].

Q2. (65)

Write a program that left rotates an array. The program inputs an integer array
of size 10, the elements of the array and an integer k. The array must be left
rotated k places.  Note that k can be negative, in which case, the array should
be right rotated k times.

For example,
if the input is
0 1 2 3 4 5 6 7 8 9 and k is 2,
the output should be
2 3 4 5 6 7 8 9 0 1

If the input is
0 1 2 3 4 5 6 7 8 9 and k is -3,
the output should be
7 8 9 0 1 2 3 4 5 6

You cannot use another temporary array.  You can swap two elements of the
array.  Also, you cannot simply left rotate the array k times by shifting it
through 1 place each time.

Q1. WAP to compare a string for panlindromicity.

Q2. (60 using recursion, 50 not using recursion)

Write a program that inputs a line of characters from the user.  The line may
contain blanks.  (Use gets.)

Write a function that outputs the line (use puts) with the words reversed.  The
characters in the word should not be reversed.

For example, if the input is
This is hard
the output should be
hard is This

Try doing it by recursion.  If you cannot, use a non-recursive function (you
lose 10% marks).
QSPOJ1. WAP an efficient algorithm for finding all prime numbers between a and b where (a-b) may be very large.
